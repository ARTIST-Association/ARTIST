[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "artist"
version = "0.0.1"
authors = [
  { name="ARTIST Consortium", email="artist@lists.kit.edu" },
]
description = "AI-enhanced Differentiable Ray Tracer for Irradiation Prediction in Solar Tower Digital Twins"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 1 - Planning",
]
dependencies = [
    "numpy",
    "torch",
    "h5py",
    "colorlog",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "ruff",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "sphinx-autoapi",
    "sphinx-rtd-theme",
    "sphinxcontrib-napoleon",
    "sphinxemoji",
]
mpi = ["mpi4py",]
tutorials = ["matplotlib"]

[project.urls]
Homepage = "https://github.com/ARTIST-Association/ARTIST"
Issues = "https://github.com/ARTIST-Association/ARTIST/issues"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["N", "E4", "E7", "E9", "F", "D"]
ignore = ["D100", "D104"]
# Enable import sorting
extend-select = ["I"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
testpaths = [
    "tests",
]

[tool.coverage.run]
omit = [
    "artist/util/scenario_generator.py",
    "artist/util/configuration_classes.py"
    ]
