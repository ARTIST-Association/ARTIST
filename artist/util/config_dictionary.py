power_plant_position = "position"
"""Key to access the power plant position."""

receiver_type = "type"
"""Key to access the receiver type."""
receiver_position_center = "position_center"
"""Key to access the receiver center position."""
receiver_normal_vector = "normal_vector"
"""Key to access the receiver normal vector."""
receiver_plane_e = "plane_e"
"""Key to access the receiver plane in the east direction."""
receiver_plane_u = "plane_u"
"""Key to access the receiver plane in the up direction."""
receiver_resolution_e = "resolution_e"
"""Key to access the receiver resolution in the east direction."""
receiver_resolution_u = "resolution_u"
"""Key to access the receiver resolution in the up direction."""
receiver_curvature_e = "curvature_e"
"""Key to access the receiver curvature in the east direction."""
receiver_curvature_u = "curvature_u"
"""Key to access the receiver curvature in the up direction."""
receiver_type_planar = "planar"
"""Key used to define that a planar receiver type is used."""

light_source_prefix = "lightsource"
"""Key to access the light source."""
light_source_type = "type"
"""Key to access the light source type."""
sun_key = "sun"
"""Key to define that the light source type is a sun."""
light_source_number_of_rays = "number_of_rays"
"""Key to access the number of rays for the light source."""
light_source_distribution_parameters = "distribution_parameters"
"""Key to access the light source distribution parameters."""
light_source_distribution_type = "distribution_type"
"""Key to access the light source distribution type."""
light_source_distribution_is_normal = "normal"
"""Key to define that the light source distribution is modelled by a multivariate normal distribution."""
light_source_mean = "mean"
"""Key to access the mean for the light source distribution."""
light_source_covariance = "covariance"
"""Key to access the covariance for the light source distribution."""

facets_key = "facets"
"""Key to access the facets."""
facet_control_points = "control_points_e"
"""Key to access the facet control points."""
facet_degree_e = "degree_e"
"""Key to access the facet degree in the east direction."""
facet_degree_n = "degree_n"
"""Key to access the facet degree in the north direction."""
facet_number_eval_e = "number_eval_e"
"""Key to access the facet number of evaluation points in the east direction."""
facet_number_eval_n = "number_eval_n"
"""Key to access the facet number of evaluation points in the north direction."""
facets_width = "width"
"""Key to access the facet width."""
facets_height = "height"
"""Key to access the facet height."""
facets_translation_vector = "position"
"""Key to access the translation vector indicating the position of the facet relative to the center of the heliostat."""
facets_canting_e = "canting_e"
"""Key to access the facet canting in the east direction."""
facets_canting_n = "canting_n"
"""Key to access the facet canting in the north direction."""

first_joint_translation_e = "first_joint_translation_e"
"""Key to access the kinematic first joint translation in the east direction."""
first_joint_translation_n = "first_joint_translation_n"
"""Key to access the kinematic first joint translation in the north direction."""
first_joint_translation_u = "first_joint_translation_u"
"""Key to access the kinematic first joint translation in the up direction."""
first_joint_tilt_e = "first_joint_tilt_e"
"""Key to access the kinematic first joint tilt in the east direction."""
first_joint_tilt_n = "first_joint_tilt_n"
"""Key to access the kinematic first joint tilt in the north direction."""
first_joint_tilt_u = "first_joint_tilt_u"
"""Key to access the kinematic first joint tilt in the up direction."""
second_joint_translation_e = "second_joint_translation_e"
"""Key to access the kinematic second joint translation in the east direction."""
second_joint_translation_n = "second_joint_translation_n"
"""Key to access the kinematic second joint translation in the north direction."""
second_joint_translation_u = "second_joint_translation_u"
"""Key to access the kinematic second joint translation in the up direction."""
second_joint_tilt_e = "second_joint_tilt_e"
"""Key to access the kinematic second joint tilt in the east direction."""
second_joint_tilt_n = "second_joint_tilt_n"
"""Key to access the kinematic second joint tilt in the north direction."""
second_joint_tilt_u = "second_joint_tilt_u"
"""Key to access the kinematic second joint tilt in the up direction."""
concentrator_translation_e = "concentrator_translation_e"
"""Key to access the kinematic concentrator translation in the east direction."""
concentrator_translation_n = "concentrator_translation_u"
"""Key to access the kinematic concentrator translation in the north direction."""
concentrator_translation_u = "concentrator_translation_n"
"""Key to access the kinematic concentrator translation in the up direction."""
concentrator_tilt_e = "concentrator_tilt_e"
"""Key to access the kinematic concentrator tilt in the east direction."""
concentrator_tilt_n = "concentrator_tilt_n"
"""Key to access the kinematic concentrator tilt in the north direction."""
concentrator_tilt_u = "concentrator_tilt_u"
"""Key to access the kinematic concentrator tilt in the up direction."""

kinematic_initial_orientation_offset_e = "initial_kinematic_orientation_offset_e"
"""Key to access the initial kinematic orientation offset in the east direction."""
kinematic_initial_orientation_offset_n = "initial_kinematic_orientation_offset_n"
"""Key to access the initial kinematic orientation offset in the north direction."""
kinematic_initial_orientation_offset_u = "initial_kinematic_orientation_offset_u"
"""Key to access the initial kinematic orientation offset in the up direction."""

kinematic_type = "type"
"""Key to access the kinematic type."""
rigid_body_key = "rigid_body"
"""Key to define that the rigid body kinematic is used as a kinematic type."""
kinematic_offsets_key = "kinematic_offsets"
"""Key to access the kinematic offsets."""
kinematic_deviations_key = "kinematic_deviations"
"""Key to access the kinematic deviations."""

actuator_clockwise = "clockwise"
"""Key to access the actuator clockwise parameter."""
actuator_increment = "actuator_increment"
"""Key to access the actuator increment parameter."""
actuator_initial_stroke_length = "initial_stroke_length"
"""Key to access the actuator initial stroke length parameter."""
actuator_offset = "offset"
"""Key to access the actuator offset parameter."""
actuator_radius = "radius"
"""Key to access the actuator radius parameter."""
actuator_phi_0 = "phi_0"
"""Key to access the actuator phi 0 parameter."""

actuator_type_key = "actuator_type"
"""Key to access the actuator type."""
actuator_parameters_key = "actuator_parameters"
"""Key to access the actuator parameters."""
ideal_actuator_key = "ideal_actuator"
"""Key defining that the actuator used is an ideal actuator."""
linear_actuator_key = "linear_actuator"
"""Key defining that the actuator used is a linear actuator."""

surface_prototype_key = "surface"
"""Key to access the surface prototype."""
kinematic_prototype_key = "kinematic"
"""Key to access the kinematic prototype."""
actuator_prototype_key = "actuator"
"""Key to access the actuator prototype."""

heliostat_id = "id"
"""Key to access the heliostat ID."""
heliostat_position = "position"
"""Key to access the heliostat position."""
heliostat_aim_point = "aim_point"
"""Key to access the heliostat aim point."""
heliostat_surface_key = "surface"
"""Key to access the heliostat surface."""
heliostat_kinematic_key = "kinematic"
"""Key to access the heliostat kinematic."""
heliostat_actuator_key = "actuator"
"""Key to access the heliostat actuator."""

prototype_key = "prototypes"
"""Key to access the prototypes."""
power_plant_key = "power_plant"
"""Key to access the power plant."""
receiver_key = "receivers"
"""Key to access the receivers."""
light_source_key = "lightsources"
"""Key to access the light sources."""
heliostat_key = "heliostats"
"""Key to access the heliostats."""

convert_nurbs_from_points = "point_cloud"
"""Defines that the NURBS should be learnt using a point cloud."""
convert_nurbs_from_normals = "deflectometry"
"""Defines that the NURBS should be learnt using deflectometry data."""

# Constants for WGS84
# TODO 
# Is this the right place to save this data?
WGS84_A = 6378137.0  # Major axis in meters
WGS84_B = 6356752.314245  # Minor axis in meters
WGS84_E2 = (WGS84_A**2 - WGS84_B**2) / WGS84_A**2  # Eccentricity squared